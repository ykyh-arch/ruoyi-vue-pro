Version - 流程版本 -> act_ge_property、act_id_property
Model - 流程模型 -> act_re_model
BpmModel - 流程模型（包含流程设计数据） -> act_ge_bytearray
EditorSource - 流程设计数据  -> act_ge_bytearray
Deployment - 流程部署 -> act_re_deployment
ProcessDefinition - 部署后产生新的流程定义（流程定义有多个） -> act_re_procdef、bpm_process_definition_ext
ProcessInstance - 流程实例 -> act_ru_actinst、act_hi_procinst、act_hi_actinst、bpm_process_instance_ext 
Task - 流程任务 -> act_ru_task、act_hi_taskinst、bpm_task_ext
DelegateExecution - 任务执行 -> act_ru_execution（PROC_DEF_ID_、PROC_INST_ID_、ACT_ID_（即TASK_DEF_KEY_）、ROOT_PROC_INST_ID_ 树结构）
关系
BpmModel（一）-> ProcessDefinition（多，分多个挂起与一个激活）
ProcessDefinition（一，激活）-> ProcessInstance（多）
ProcessInstance（一）-> DelegateExecution（对应单实例任务一个，多实例任务多个，任务执行完数据清除）
DelegateExecution（一） -> Task（一），两者一一对应
其他表
act_hi_varinst - 历史流程实例变量
act_ru_variable - 流程运行变量
act_id_user - 用户
act_id_group - 组	
act_id_membership - 用户与组关联
act_ru_identitylink、act_hi_identitylink - 候选人、分配人（负责人）、参与人、发起人等
// 保存Model
repositoryService.newModel();
repositoryService.saveModel(model);
// 查询Model
repositoryService.getModel(id);
// 查询ModelEditorSource
byte[]bpmnBytes = repositoryService.getModelEditorSource(id);
// 获取BpmnModel
converter.convertToBpmnModel(new BytesStreamSource(bpmnBytes), true, true);
byte[] bpmnBytes = converter.convertToXML(bpmnModel);
repositoryService.getBpmnModel(processDefinitionId);
// 添加Model对应的EditorSource
repositoryService.addModelEditorSource(model.getId(), StrUtil.utf8Bytes(bpmnXml));
// 构建Model查询参数
repositoryService.createModelQuery();
// 构建Model查询参数且根据主键查询
repositoryService.createModelQuery().modelKey(key).singleResult();
// 查询Model分页
modelQuery.listPage(PageUtils.getStart(pageVO), pageVO.getPageSize());
// 构建Deployment查询参数且根据主键查询
repositoryService.createDeploymentQuery().deploymentId(id).singleResult();
// 构建ProcessDefinition查询参数且根据deploymentIds查询
repositoryService.createProcessDefinitionQuery().deploymentIds(deploymentIds).list();
repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId).singleResult();
repositoryService.createProcessDefinitionQuery().processDefinitionId(id).singleResult();
// 构建ProcessDefinition查询参数且根据processDefinitionKey查询
repositoryService.createProcessDefinitionQuery().processDefinitionKey(key).active().singleResult();
// 查询ProcessDefinition分页
definitionQuery.orderByProcessDefinitionVersion().desc().listPage(PageUtils.getStart(pageVO), pageVO.getPageSize());
// 构建ProcessDefinition
repositoryService.getProcessDefinition(id);
// 构建Deployment部署
repositoryService.createDeployment().key(key).name(name).category(category).addBytes(key + BPMN_FILE_SUFFIX, createReqDTO.getBpmnBytes()).deploy();
// 获取Deployment
repositoryService.createDeploymentQuery().deploymentId(id).singleResult();
// 流程挂起
repositoryService.suspendProcessDefinitionById(id, false, null);
// 流程激活
repositoryService.activateProcessDefinitionById(id, false, null);
// 构建ProcessDefinition
repositoryService.getProcessDefinition(id);
// 构建发起ProcessInstance
runtimeService.startProcessInstanceById(definition.getId(), businessKey, variables);
// 构建ProcessInstance
runtimeService.createProcessInstanceQuery().processInstanceId(id).singleResult();
runtimeService.createProcessInstanceQuery().processInstanceIds(ids).list();
// 删除ProcessInstance
runtimeService.deleteProcessInstance(id, reason);
// 构建HistoricProcessInstance
historyService.createHistoricProcessInstanceQuery().processInstanceId(id).singleResult();
// 构建HistoricProcessInstance
historyService.createHistoricActivityInstanceQuery().executionId(executionId).list();
// 构建HistoricTaskInstance
historyService.createHistoricTaskInstanceQuery().taskId(id).singleResult();
// 构建HistoricTaskInstance列表
historyService.createHistoricTaskInstanceQuery().processInstanceId(processInstanceId).orderByHistoricTaskInstanceStartTime().desc().list();
// 构建HistoricActivityInstance列表
historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstanceId).list(); 
// 构建Task列表
taskService.createTaskQuery().processInstanceIdIn(processInstanceIds).list();
// 构建TaskQuery且分页查询我的待办任务列表 
taskService.createTaskQuery().taskAssignee(userId).orderByTaskCreateTime().desc().listPage(pageNum, pageSize);
// 构建TaskQuery且分页查询我的已办任务列表
historyService.createHistoricTaskInstanceQuery().finished().taskAssignee(userId).orderByHistoricTaskInstanceEndTime().desc().listPage(pageNum, pageSize);        
// 构建Task
taskService.createTaskQuery().taskId(id).singleResult();
// 通过审批Task
taskService.complete(taskId, instance.getProcessVariables());   
// 更新Task负责人
taskService.setAssignee(taskId, userId);              